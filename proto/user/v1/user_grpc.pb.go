// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userv1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApiKeyServiceClient is the client API for ApiKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiKeyServiceClient interface {
	CreateApiKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*ApiKey, error)
	DeleteApiKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type apiKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeyServiceClient(cc grpc.ClientConnInterface) ApiKeyServiceClient {
	return &apiKeyServiceClient{cc}
}

func (c *apiKeyServiceClient) CreateApiKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*ApiKey, error) {
	out := new(ApiKey)
	err := c.cc.Invoke(ctx, "/user.v1.ApiKeyService/CreateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) DeleteApiKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.ApiKeyService/DeleteApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeyServiceServer is the server API for ApiKeyService service.
// All implementations must embed UnimplementedApiKeyServiceServer
// for forward compatibility
type ApiKeyServiceServer interface {
	CreateApiKey(context.Context, *CreateAPIKeyRequest) (*ApiKey, error)
	DeleteApiKey(context.Context, *DeleteAPIKeyRequest) (*empty.Empty, error)
	mustEmbedUnimplementedApiKeyServiceServer()
}

// UnimplementedApiKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiKeyServiceServer struct {
}

func (UnimplementedApiKeyServiceServer) CreateApiKey(context.Context, *CreateAPIKeyRequest) (*ApiKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) DeleteApiKey(context.Context, *DeleteAPIKeyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) mustEmbedUnimplementedApiKeyServiceServer() {}

// UnsafeApiKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiKeyServiceServer will
// result in compilation errors.
type UnsafeApiKeyServiceServer interface {
	mustEmbedUnimplementedApiKeyServiceServer()
}

func RegisterApiKeyServiceServer(s grpc.ServiceRegistrar, srv ApiKeyServiceServer) {
	s.RegisterService(&_ApiKeyService_serviceDesc, srv)
}

func _ApiKeyService_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.ApiKeyService/CreateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).CreateApiKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.ApiKeyService/DeleteApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).DeleteApiKey(ctx, req.(*DeleteAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.ApiKeyService",
	HandlerType: (*ApiKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApiKey",
			Handler:    _ApiKeyService_CreateApiKey_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _ApiKeyService_DeleteApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
