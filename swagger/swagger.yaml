basePath: /rest/api/1
consumes:
- application/json
definitions:
  APIKey:
    properties:
      api_key_id:
        description: APIKeyID is a generated id of the key.
        type: string
        x-go-name: APIKeyID
      api_key_secret:
        description: APIKeySecret is a generated secret, aka, the key.
        type: string
        x-go-name: APIKeySecret
      create_at:
        description: CreateAt defines when this key was created.
        example: time.Now()
        format: date-time
        type: string
        x-go-name: CreateAt
      id:
        description: ID of the key. This is auto-generated.
        format: int64
        type: integer
        x-go-name: ID
      name:
        description: Name of the key
        type: string
        x-go-name: Name
      ttl:
        description: TTL defines how long this key can live in duration.
        example: 1h10m10s
        type: string
        x-go-name: TTL
      user_id:
        description: UserID is the ID of the user to which this key belongs.
        format: int64
        type: integer
        x-go-name: UserID
    required:
    - id
    - name
    - user_id
    - api_key_id
    - api_key_secret
    - ttl
    - create_at
    title: APIKey is an api key pair generated by the user to access the api without
      the frontend.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  Auth:
    properties:
      password:
        description: Password is the password required to access the platform for
          this repositroy.
        type: string
        x-go-name: Password
      secret:
        description: Hook secret to create a hook with on the respective platform.
        type: string
        x-go-name: Secret
      ssh:
        description: SSH private key.
        type: string
        x-go-name: SSH
      username:
        description: Username is the username required to access the platform for
          this repositroy.
        type: string
        x-go-name: Username
    required:
    - secret
    title: Auth is authentication option for a repository.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  Command:
    properties:
      enabled:
        description: Enabled defines if this command can be executed or not.
        example: false
        type: boolean
        x-go-name: Enabled
      filename:
        description: Filename is the name of the file which holds this command.
        example: my_awesome_command
        type: string
        x-go-name: Filename
      hash:
        description: Hash is the hash of the command file.
        type: string
        x-go-name: Hash
      id:
        description: ID of the command. Generated.
        format: int64
        type: integer
        x-go-name: ID
      location:
        description: Location is where this command is located at. This is the full
          path of the containing folder.
        example: /tmp/krok-commands
        type: string
        x-go-name: Location
      name:
        description: Name of the command.
        type: string
        x-go-name: Name
      repositories:
        description: Repositories that this command can execute on.
        items:
          $ref: '#/definitions/Repository'
        type: array
        x-go-name: Repositories
      schedule:
        description: Schedule of the command.
        example: 0 * * * * // follows cron job syntax.
        type: string
        x-go-name: Schedule
    required:
    - name
    - id
    - filename
    - location
    - hash
    title: Command is a command which can be executed by Krok.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  CommandRun:
    description: |-
      CommandRun is a single run of a command belonging to an event
      including things like, state, event, and created at.
    properties:
      command_name:
        description: CommandName is the name of the command that is being executed.
        type: string
        x-go-name: CommandName
      create_at:
        description: CreatedAt is the time when this command run was created.
        format: date-time
        type: string
        x-go-name: CreateAt
      event_id:
        description: EventID is the ID of the event that this run belongs to.
        format: int64
        type: integer
        x-go-name: EventID
      id:
        description: ID is a generatd identifier.
        format: int64
        type: integer
        x-go-name: ID
      outcome:
        description: Outcome is any output of the command. Stdout and stderr combined.
        type: string
        x-go-name: Outcome
      status:
        description: Status is the current state of the command run.
        example: running, failed, success
        type: string
        x-go-name: Status
    required:
    - id
    - event_id
    - command_name
    - status
    - create_at
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  CommandSetting:
    properties:
      command_id:
        description: CommandID is the ID of the command to which these settings belong
          to.
        format: int64
        type: integer
        x-go-name: CommandID
      id:
        description: ID is a generated ID.
        format: int64
        type: integer
        x-go-name: ID
      in_vault:
        description: InVault defines if this is sensitive information and should be
          stored securely.
        type: boolean
        x-go-name: InVault
      key:
        description: Key is the name of the setting.
        type: string
        x-go-name: Key
      value:
        description: Value is the value of the setting.
        type: string
        x-go-name: Value
    required:
    - id
    - command_id
    - key
    - value
    title: CommandSetting defines the settings a command can have.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  Event:
    description: |-
      Event contains details about a platform event, such as
      the repository it belongs to and the event that created it...
    properties:
      command_runs:
        description: CommandRuns contains a list of CommandRuns which executed for
          this event.
        items:
          $ref: '#/definitions/CommandRun'
        type: array
        x-go-name: CommandRuns
      create_at:
        description: CreatedAt contains the timestamp when this event occurred.
        format: date-time
        type: string
        x-go-name: CreateAt
      event_id:
        description: |-
          EvenID is the ID of the corresponding event on the given platform. If that cannot be determined
          an ID is generated.
        type: string
        x-go-name: EventID
      id:
        description: ID is a generated ID.
        format: int64
        type: integer
        x-go-name: ID
      payload:
        description: Payload defines the information received from the platform for
          this event.
        type: string
        x-go-name: Payload
      repository_id:
        description: RepositoryID contains the ID of the repository for which this
          event occurred.
        format: int64
        type: integer
        x-go-name: RepositoryID
      vcs:
        description: VCS is the ID of the platform on which this even occurred.
        format: int64
        type: integer
        x-go-name: VCS
    required:
    - id
    - event_id
    - create_at
    - repository_id
    - payload
    - vcs
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  GitLab:
    properties:
      project_id:
        description: ProjectID is an optional ID which defines a project in Gitlab.
        format: int64
        type: integer
        x-go-name: ProjectID
    title: GitLab contains gitLab specific settings.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  ListOptions:
    properties:
      end_date:
        description: EndDate defines a date of end to look for events. Not Inclusive.
        example: "2021-02-03"
        format: date-time
        type: string
        x-go-name: EndDate
      name:
        description: Name of the context for which this option is used.
        example: '"partialNameOfACommand"'
        type: string
        x-go-name: Name
      page:
        description: Current Page
        example: 0
        format: int64
        type: integer
        x-go-name: Page
      page_size:
        description: |-
          Items per Page

          required false
        example: 10
        format: int64
        type: integer
        x-go-name: PageSize
      starting_date:
        description: StartingDate defines a date of start to look for events. Inclusive.
        example: "2021-02-02"
        format: date-time
        type: string
        x-go-name: StartingDate
      vcs:
        description: Only list all entries for a given platform ID.
        format: int64
        type: integer
        x-go-name: VCS
    title: ListOptions provides options for List operations with additional filters.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  Platform:
    properties:
      id:
        description: ID of the platform. This is choosen.
        format: int64
        type: integer
        x-go-name: ID
      name:
        description: Name of the platform.
        example: github, gitlab, gitea
        type: string
        x-go-name: Name
    required:
    - id
    - name
    title: Platform defines a platform like Github, Gitlab etc.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  Repository:
    properties:
      auth:
        $ref: '#/definitions/Auth'
      commands:
        description: Commands contains all the commands which this repository is attached
          to.
        items:
          $ref: '#/definitions/Command'
        type: array
        x-go-name: Commands
      events:
        description: 'TODO: Think about storing this'
        items:
          type: string
        type: array
        x-go-name: Events
      git_lab:
        $ref: '#/definitions/GitLab'
      id:
        description: ID of the repository. Auto-generated.
        format: int64
        type: integer
        x-go-name: ID
      name:
        description: Name of the repository.
        type: string
        x-go-name: Name
      unique_url:
        description: |-
          This field is not saved in the DB but generated every time the repository
          details needs to be displayed.
        type: string
        x-go-name: UniqueURL
      url:
        description: URL of the repository.
        type: string
        x-go-name: URL
      vcs:
        description: VCS Defines which handler will be used. For values, see platforms.go.
        format: int64
        type: integer
        x-go-name: VCS
    required:
    - id
    - url
    - vcs
    - auth
    - unique_url
    title: Repository is a repository which can be managed by Krok.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  User:
    properties:
      api_keys:
        description: APIKeys contains generated api access keys for this user.
        items:
          $ref: '#/definitions/APIKey'
        type: array
        x-go-name: APIKeys
      display_name:
        description: DisplayName is the name of the user.
        type: string
        x-go-name: DisplayName
      email:
        description: Email of the user.
        type: string
        x-go-name: Email
      id:
        description: ID of the user. This is auto-generated.
        format: int64
        type: integer
        x-go-name: ID
      last_login:
        description: LastLogin contains the timestamp of the last successful login
          of this user.
        format: date-time
        type: string
        x-go-name: LastLogin
    required:
    - email
    - id
    - last_login
    title: User is a user in the Krok system.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  UserAuthDetails:
    properties:
      Email:
        description: Email is the email of the registered user.
        type: string
      FirstName:
        description: FirstName is the first name of the user.
        type: string
      LastName:
        description: LastName is the last name of the user.
        type: string
    required:
    - Email
    - FirstName
    - LastName
    title: UserAuthDetails represents the authenticated user details.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  VCSToken:
    properties:
      token:
        description: Token is the actual token.
        type: string
        x-go-name: Token
      vcs:
        description: VCS is the ID of the platform to which this token belongs to.
        format: int64
        type: integer
        x-go-name: VCS
    required:
    - token
    - vcs
    title: VCSToken represents a token for a platform.
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
  VaultSetting:
    description: VaultSetting defines a setting that comes from the vault
    properties:
      key:
        description: Key is the name of the setting.
        type: string
        x-go-name: Key
      value:
        description: Value is the value of the setting.
        type: string
        x-go-name: Value
    required:
    - key
    - value
    type: object
    x-go-package: github.com/krok-o/krok/pkg/models
host: krok.app
info:
  description: Documentation of the Krok API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Krok.
  version: 0.0.1
paths:
  /auth/callback:
    get:
      description: Creates a cookie which will hold the authenticated user.
      operationId: userCallback
      parameters:
      - description: the state variable defined by Google
        in: query
        name: state
        required: true
        type: string
      - description: the authorization code provided by Google
        in: query
        name: code
        required: true
        type: string
      responses:
        "308":
          description: the permanent redirect url
        "401":
          description: error verifying state | error during token exchange
        "404":
          description: error invalid state|code
      summary: This is the url to which Google calls back after a successful login.
  /auth/login:
    get:
      operationId: userLogin
      parameters:
      - description: the redirect URL coming from Google to redirect login to
        in: query
        name: redirect_url
        required: true
        type: string
      responses:
        "307":
          description: the redirect url to the login
        "401":
          description: error generating state
        "404":
          description: error invalid redirect_url
      summary: User login.
  /auth/refresh:
    post:
      operationId: refreshToken
      responses:
        "200":
          description: Status OK
        "401":
          description: refresh token cookie not found|error refreshing token
      summary: Refresh the authentication token.
  /command:
    post:
      description: |-
        the command has to be edited. We don't support uploading the same thing twice.
        If the command binary needs to be updated, delete the command and upload the
        new binary.
      operationId: uploadCommand
      produces:
      - application/json
      responses:
        "201":
          description: in case of successful file upload
          schema:
            $ref: '#/definitions/Command'
        "400":
          description: invalid file format or command already exists
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to upload file, create plugin, create command or copy
            operations
          schema:
            $ref: '#/responses/Message'
      summary: Upload a command. To set up anything for the command, like schedules
        etc,
  /command/{id}:
    delete:
      operationId: deleteCommand
      parameters:
      - description: The ID of the command to delete
        format: int
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK in case the deletion was successful
        "400":
          description: in case of missing user context or invalid ID
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when the deletion operation failed
          schema:
            $ref: '#/responses/Message'
      summary: Deletes given command.
    get:
      operationId: getCommand
      parameters:
      - format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Command'
        "400":
          description: invalid command id
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to get user context
          schema:
            $ref: '#/responses/Message'
      summary: Returns a specific command.
  /command/{id}/settings:
    post:
      operationId: listCommandSettings
      parameters:
      - description: The ID of the command to list settings for
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            items:
              $ref: '#/definitions/CommandSetting'
            type: array
        "400":
          description: invalid id
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to list settings
          schema:
            $ref: '#/responses/Message'
      summary: List settings for a command.
  /command/add-command-rel-for-platform/{cmdid}/{repoid}:
    post:
      operationId: addCommandRelForPlatformCommand
      parameters:
      - format: int
        in: path
        name: cmdid
        required: true
        type: integer
      - format: int
        in: path
        name: repoid
        required: true
        type: integer
      responses:
        "200":
          description: successfully added relationship
        "400":
          description: invalid ids or platform not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to add command relationship to platform
          schema:
            $ref: '#/responses/Message'
      summary: Adds a connection to a platform for a command. Defines what platform
        a command supports. These commands will only be able to run for those platforms.
  /command/add-command-rel-for-repository/{cmdid}/{repoid}:
    post:
      operationId: addCommandRelForRepositoryCommand
      parameters:
      - format: int
        in: path
        name: cmdid
        required: true
        type: integer
      - format: int
        in: path
        name: repoid
        required: true
        type: integer
      responses:
        "200":
          description: successfully added relationship
        "400":
          description: invalid ids or repositroy not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to add relationship
          schema:
            $ref: '#/responses/Message'
      summary: Add a connection to a repository. This will make this command to be
        executed for events for that repository.
  /command/remove-command-rel-for-platform/{cmdid}/{repoid}:
    post:
      operationId: removeCommandRelForPlatformCommand
      parameters:
      - format: int
        in: path
        name: cmdid
        required: true
        type: integer
      - format: int
        in: path
        name: repoid
        required: true
        type: integer
      responses:
        "200":
          description: successfully removed relationship
        "400":
          description: invalid ids or platform not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to add relationship
          schema:
            $ref: '#/responses/Message'
      summary: Remove a relationship to a platform. This command will no longer be
        running for that platform events.
  /command/remove-command-rel-for-repository/{cmdid}/{repoid}:
    post:
      operationId: removeCommandRelForRepositoryCommand
      parameters:
      - format: int
        in: path
        name: cmdid
        required: true
        type: integer
      - format: int
        in: path
        name: repoid
        required: true
        type: integer
      responses:
        "200":
          description: successfully removed relationship
        "400":
          description: invalid ids or repositroy not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to add relationship
          schema:
            $ref: '#/responses/Message'
      summary: Remove a relationship to a repository. This command will no longer
        be running for that repository events.
  /command/run/{id}:
    get:
      operationId: getCommandRun
      parameters:
      - format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/CommandRun'
        "400":
          description: invalid command id
          schema:
            $ref: '#/responses/Message'
        "404":
          description: command run not found
        "500":
          description: failed to get command run
          schema:
            $ref: '#/responses/Message'
      summary: Returns details about a command run.
  /command/settings/{id}:
    delete:
      operationId: deleteCommandSetting
      parameters:
      - description: The ID of the command setting to delete
        format: int
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK in case the deletion was successful
        "400":
          description: invalid id
          schema:
            $ref: '#/responses/Message'
        "404":
          description: command setting not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when the deletion operation failed
          schema:
            $ref: '#/responses/Message'
      summary: Deletes a given command setting.
    get:
      operationId: getCommandSetting
      parameters:
      - description: The ID of the command setting to retrieve
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/CommandSetting'
        "400":
          description: invalid command id
          schema:
            $ref: '#/responses/Message'
        "404":
          description: command setting not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to get command setting
          schema:
            $ref: '#/responses/Message'
      summary: Get a specific setting.
  /command/settings/update:
    post:
      operationId: updateCommandSetting
      parameters:
      - in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/CommandSetting'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created command setting
        "400":
          description: binding error
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to create the command setting
          schema:
            $ref: '#/responses/Message'
      summary: Create a new command setting.
  /command/update:
    post:
      consumes:
      - application/json
      operationId: updateCommand
      parameters:
      - in: body
        name: command
        required: true
        schema:
          $ref: '#/definitions/Command'
      produces:
      - application/json
      responses:
        "200":
          description: successfully updated command
          schema:
            $ref: '#/definitions/Command'
        "400":
          description: binding error
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to update the command
          schema:
            $ref: '#/responses/Message'
      summary: Updates a given command.
  /commands:
    post:
      description: List commands
      operationId: listCommands
      parameters:
      - in: body
        name: listOptions
        schema:
          $ref: '#/definitions/ListOptions'
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            items:
              $ref: '#/definitions/Command'
            type: array
        "500":
          description: failed to get user context
          schema:
            $ref: '#/responses/Message'
  /event/{id}:
    get:
      operationId: getEvent
      parameters:
      - description: The ID of the event to retrieve
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Event'
        "400":
          description: invalid event id
          schema:
            $ref: '#/responses/Message'
        "404":
          description: event not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to get event
          schema:
            $ref: '#/responses/Message'
      summary: Get a specific event.
  /events/{repoid}:
    post:
      operationId: listEvents
      parameters:
      - description: The ID of the repository to list events for.
        format: int
        in: path
        name: repoid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            items:
              $ref: '#/definitions/Event'
            type: array
        "400":
          description: invalid repository id
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to list events
          schema:
            $ref: '#/responses/Message'
      summary: List events for a repository.
  /get-token:
    post:
      deprecated: true
      operationId: getToken
      produces:
      - application/json
      responses:
        "200":
          description: the generated JWT token
          schema:
            $ref: '#/responses/TokenResponse'
        "500":
          description: when there was a problem with matching the email, or the api
            key or generating the token
      summary: Creates a JWT token for a given api key pair.
  /hooks/{rid}/{vid}/callback:
    post:
      operationId: hookHandler
      parameters:
      - description: The ID of the repository.
        format: int
        in: path
        name: rid
        required: true
        type: integer
      - description: The ID of the provider.
        format: int
        in: path
        name: vid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success in case the hook event was processed without problems
        "400":
          description: for invalid parameters
        "404":
          description: if the repository or the provider does not exist
      summary: Handle the hooks created by the platform.
  /repositories:
    post:
      consumes:
      - application/json
      description: List repositories
      operationId: listRepositories
      parameters:
      - in: body
        name: listOptions
        schema:
          $ref: '#/definitions/ListOptions'
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            items:
              $ref: '#/definitions/Repository'
            type: array
        "500":
          description: failed to list repositories
          schema:
            $ref: '#/responses/Message'
  /repository:
    post:
      consumes:
      - application/json
      description: Creates a new repository
      operationId: createRepository
      parameters:
      - in: body
        name: repository
        required: true
        schema:
          $ref: '#/definitions/Repository'
      produces:
      - application/json
      responses:
        "200":
          description: the created repository
          schema:
            $ref: '#/definitions/Repository'
        "400":
          description: failed to generate unique key or value
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when failed to get user context
          schema:
            $ref: '#/responses/Message'
  /repository/{id}:
    delete:
      operationId: deleteRepository
      parameters:
      - description: The ID of the repository to delete
        format: int
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK in case the deletion was successful
        "400":
          description: in case of missing user context or invalid ID
          schema:
            $ref: '#/responses/Message'
        "404":
          description: in case of repository not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when the deletion operation failed
          schema:
            $ref: '#/responses/Message'
      summary: Deletes the given repository.
    get:
      operationId: getRepository
      parameters:
      - format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Repository'
        "400":
          description: invalid repository id
          schema:
            $ref: '#/responses/Message'
        "404":
          description: repository not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to get repository
          schema:
            $ref: '#/responses/Message'
      summary: Gets the repository with the corresponding ID.
  /repository/update:
    post:
      consumes:
      - application/json
      operationId: updateRepository
      parameters:
      - in: body
        name: repository
        required: true
        schema:
          $ref: '#/definitions/Repository'
      produces:
      - application/json
      responses:
        "200":
          description: the updated repository
          schema:
            $ref: '#/definitions/Repository'
        "400":
          description: failed to bind repository
          schema:
            $ref: '#/responses/Message'
        "404":
          description: repository not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to update repository
          schema:
            $ref: '#/responses/Message'
      summary: Updates an existing repository.
  /supported-platforms:
    get:
      operationId: listSupportedPlatforms
      produces:
      - application/json
      responses:
        "200":
          description: the list of supported platform ids
          schema:
            items:
              $ref: '#/definitions/Platform'
            type: array
      summary: Lists all supported platforms.
  /user:
    post:
      consumes:
      - application/json
      description: Creates a new user
      operationId: createUser
      parameters:
      - in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        "200":
          description: the created user
          schema:
            $ref: '#/definitions/User'
        "400":
          description: invalid json payload
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to create user or generating a new api key
          schema:
            $ref: '#/responses/Message'
  /user/{id}:
    delete:
      operationId: deleteUser
      parameters:
      - description: The ID of the user to delete
        format: int
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK in case the deletion was successful
        "400":
          description: in case of missing user context or invalid ID
          schema:
            $ref: '#/responses/Message'
        "404":
          description: in case of user not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when the deletion operation failed
          schema:
            $ref: '#/responses/Message'
      summary: Deletes the given user.
    get:
      operationId: getUser
      parameters:
      - format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/User'
        "400":
          description: invalid user id
          schema:
            $ref: '#/responses/Message'
        "404":
          description: user not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to get user
          schema:
            $ref: '#/responses/Message'
      summary: Gets the user with the corresponding ID.
  /user/apikey:
    post:
      operationId: listApiKeys
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            items:
              $ref: '#/definitions/APIKey'
            type: array
        "500":
          description: failed to get user context
          schema:
            $ref: '#/responses/Message'
      summary: Lists all api keys for a given user.
  /user/apikey/{keyid}:
    get:
      operationId: getApiKeys
      parameters:
      - description: The ID of the key to return
        format: int
        in: path
        name: keyid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/APIKey'
        "500":
          description: failed to get user context
          schema:
            $ref: '#/responses/Message'
      summary: Returns a given api key.
  /user/apikey/delete/{keyid}:
    delete:
      operationId: deleteApiKey
      parameters:
      - description: The ID of the key to delete
        format: int
        in: path
        name: keyid
        required: true
        type: integer
      responses:
        "200":
          description: OK in case the deletion was successful
        "400":
          description: in case of missing user context or invalid ID
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when the deletion operation failed
          schema:
            $ref: '#/responses/Message'
      summary: Deletes a set of api keys for a given user with a given id.
  /user/apikey/generate/{name}:
    post:
      operationId: createApiKey
      parameters:
      - description: the name of the key
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: the generated api key pair
          schema:
            $ref: '#/definitions/APIKey'
        "400":
          description: failed to generate unique key or value
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when failed to get user context
          schema:
            $ref: '#/responses/Message'
      summary: Creates an api key pair for a given user.
  /user/update:
    post:
      consumes:
      - application/json
      operationId: updateUser
      parameters:
      - in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        "200":
          description: user successfully updated
          schema:
            $ref: '#/definitions/User'
        "400":
          description: invalid json payload
          schema:
            $ref: '#/responses/Message'
        "404":
          description: user not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to update user
          schema:
            $ref: '#/responses/Message'
      summary: Updates an existing user.
  /users:
    post:
      description: List users
      operationId: listUsers
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        "500":
          description: failed to list user
          schema:
            $ref: '#/responses/Message'
  /vault/secret:
    post:
      consumes:
      - application/json
      operationId: createSecret
      parameters:
      - in: body
        name: secret
        required: true
        schema:
          $ref: '#/definitions/VaultSetting'
      responses:
        "200":
          description: OK setting successfully create
        "400":
          description: invalid json payload
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to create secret
          schema:
            $ref: '#/responses/Message'
      summary: Create a new secure secret.
  /vault/secret/{name}:
    delete:
      operationId: deleteSecret
      parameters:
      - description: The key of the secret
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK in case the deletion was successful
        "400":
          description: in case of missing name
          schema:
            $ref: '#/responses/Message'
        "404":
          description: in case the secret was not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: when the deletion operation failed
          schema:
            $ref: '#/responses/Message'
      summary: Deletes the given secret.
    get:
      operationId: getSecret
      parameters:
      - in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/VaultSetting'
        "400":
          description: invalid name
          schema:
            $ref: '#/responses/Message'
        "404":
          description: secret not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to load secrets
          schema:
            $ref: '#/responses/Message'
      summary: Get a specific secret.
  /vault/secret/update:
    post:
      consumes:
      - application/json
      operationId: updateSecret
      parameters:
      - in: body
        name: secret
        required: true
        schema:
          $ref: '#/definitions/VaultSetting'
      responses:
        "200":
          description: OK setting successfully updated
        "400":
          description: invalid json payload
          schema:
            $ref: '#/responses/Message'
        "404":
          description: setting not found
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to update secret
          schema:
            $ref: '#/responses/Message'
      summary: Updates an existing secret.
  /vault/secrets:
    post:
      operationId: listSecrets
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            items:
              $ref: '#/definitions/VaultSetting'
            type: array
        "500":
          description: failed to load secrets
          schema:
            $ref: '#/responses/Message'
      summary: List all settings without the values.
  /vcs-token:
    post:
      consumes:
      - application/json
      operationId: createVcsToken
      parameters:
      - in: body
        name: secret
        required: true
        schema:
          $ref: '#/definitions/VCSToken'
      responses:
        "200":
          description: OK setting successfully create
        "400":
          description: invalid json payload
          schema:
            $ref: '#/responses/Message'
        "500":
          description: failed to create secret
          schema:
            $ref: '#/responses/Message'
      summary: Create a new token for a platform like Github, Gitlab, Gitea...
produces:
- application/json
responses:
  Message:
    description: Message represents an error message.
  TokenResponse:
    description: TokenResponse contains the generated JWT token.
schemes:
- http
swagger: "2.0"
