create table commands (
    id serial primary key ,
    name varchar unique not null,
    schedule varchar,
    filename varchar unique not null,
    hash varchar unique not null,
    location varchar unique not null,
    enabled boolean not null
);

create table command_settings
(
    id serial primary key,
    command_id int,
    constraint fk_command_id
        foreign key (command_id)
            references commands(id)
            on delete cascade,
    -- this will have to be appended with the command ID and a unique id
    -- in case it's in_vault to not clash with other settings.
    key varchar,
    value varchar,
    in_vault boolean,
    -- for a command make sure a key is unique. But for other commands the same key can be used.
    unique(command_id, key)
);

create table repositories (
    id serial primary key,
    name varchar ( 256 ) unique not null,
    url varchar ( 256 ),
    vcs int
);

create table rel_commands_repositories (
    id serial primary key,
    repository_id int,
    command_id int,
    constraint fk_repository_id
        foreign key (repository_id)
            references repositories(id)
            on delete cascade,
    constraint fk_command_id
        foreign key (command_id)
            references commands(id)
            on delete cascade
);

create table users (
    id serial primary key,
    -- email is coming from openid registration.
    email varchar(256) unique not null,
    last_login date,
    display_name varchar(50)
);

-- api keys will be generated by the user.
create table apikeys (
    id serial primary key,
    name varchar,
    api_key_id varchar unique not null,
    -- this will be shown once then never again as it will be stored encrypted.
    api_key_secret varchar not null,
    user_id int not null,
    ttl date
);

-- The files lock which will contain the lock for a file with a timestamp of creation.
-- Locks that are older than 10 minutes will be purged.
create table file_lock (
    name varchar ( 256 ) unique not null,
    lock_start date
)
