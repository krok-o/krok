// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KrokServiceClient is the client API for KrokService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KrokServiceClient interface {
	// HandleHooks handles all hooks incoming to Krok.
	HandleHooks(ctx context.Context, in *HandleHooksRequest, opts ...grpc.CallOption) (*HandleHooksResponse, error)
}

type krokServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKrokServiceClient(cc grpc.ClientConnInterface) KrokServiceClient {
	return &krokServiceClient{cc}
}

func (c *krokServiceClient) HandleHooks(ctx context.Context, in *HandleHooksRequest, opts ...grpc.CallOption) (*HandleHooksResponse, error) {
	out := new(HandleHooksResponse)
	err := c.cc.Invoke(ctx, "/krok.v1.KrokService/HandleHooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KrokServiceServer is the server API for KrokService service.
// All implementations should embed UnimplementedKrokServiceServer
// for forward compatibility
type KrokServiceServer interface {
	// HandleHooks handles all hooks incoming to Krok.
	HandleHooks(context.Context, *HandleHooksRequest) (*HandleHooksResponse, error)
}

// UnimplementedKrokServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKrokServiceServer struct {
}

func (UnimplementedKrokServiceServer) HandleHooks(context.Context, *HandleHooksRequest) (*HandleHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleHooks not implemented")
}

// UnsafeKrokServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KrokServiceServer will
// result in compilation errors.
type UnsafeKrokServiceServer interface {
	mustEmbedUnimplementedKrokServiceServer()
}

func RegisterKrokServiceServer(s grpc.ServiceRegistrar, srv KrokServiceServer) {
	s.RegisterService(&KrokService_ServiceDesc, srv)
}

func _KrokService_HandleHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrokServiceServer).HandleHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/krok.v1.KrokService/HandleHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrokServiceServer).HandleHooks(ctx, req.(*HandleHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KrokService_ServiceDesc is the grpc.ServiceDesc for KrokService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KrokService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "krok.v1.KrokService",
	HandlerType: (*KrokServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleHooks",
			Handler:    _KrokService_HandleHooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "krok.proto",
}
