// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/krok-o/krok/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// EventsStorer is an autogenerated mock type for the EventsStorer type
type EventsStorer struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, event
func (_m *EventsStorer) Create(ctx context.Context, event *models.Event) (*models.Event, error) {
	ret := _m.Called(ctx, event)

	var r0 *models.Event
	if rf, ok := ret.Get(0).(func(context.Context, *models.Event) *models.Event); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: ctx, eventID
func (_m *EventsStorer) GetEvent(ctx context.Context, eventID int) (*models.Event, error) {
	ret := _m.Called(ctx, eventID)

	var r0 *models.Event
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Event); ok {
		r0 = rf(ctx, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventForRepository provides a mock function with given fields: ctx, repoID, options
func (_m *EventsStorer) ListEventsForRepository(ctx context.Context, repoID int, options models.ListOptions) (*[]models.Event, error) {
	ret := _m.Called(ctx, repoID, options)

	var r0 *[]models.Event
	if rf, ok := ret.Get(0).(func(context.Context, int, models.ListOptions) *[]models.Event); ok {
		r0 = rf(ctx, repoID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, models.ListOptions) error); ok {
		r1 = rf(ctx, repoID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, event
func (_m *EventsStorer) Update(ctx context.Context, event *models.Event) (*models.Event, error) {
	ret := _m.Called(ctx, event)

	var r0 *models.Event
	if rf, ok := ret.Get(0).(func(context.Context, *models.Event) *models.Event); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
